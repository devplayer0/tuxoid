#!/usr/bin/env python2

import os
import pyinotify

for block_dev in os.listdir("/dev/block"):
    if os.path.isdir("/dev/block/%s" % block_dev) or os.path.exists("/dev/%s" % block_dev):
        continue

    try:
        os.symlink("/dev/block/%s" % block_dev, "/dev/%s" % block_dev) 
    except OSError as ex:
        print("failed to create symlink /dev/%s to block device /dev/block/%s" % (block_dev, block_dev))

wm = pyinotify.WatchManager()
mask = pyinotify.IN_DELETE | pyinotify.IN_CREATE

class EventHandler(pyinotify.ProcessEvent):
    def process_IN_CREATE(self, event):
        if os.path.lexists("/dev/%s" % event.name):
            return
         
        print("creating symlink /dev/%s to block device /dev/block/%s for compatibility..." % (event.name, event.name)) 
        try:
           os.symlink("/dev/block/%s" % event.name, "/dev/%s" % event.name) 
        except OSError as ex:
            print("failed to create symlink /dev/%s to block device /dev/block/%s" % (event.name, event.name))

    def process_IN_DELETE(self, event):
        if not os.path.lexists("/dev/%s" % event.name):
            return

        print("block device /dev/block/%s was removed, deleting symlink /dev/%s" % (event.name, event.name))
        try:
            os.unlink("/dev/%s" % event.name)
        except OSError as ex:
            print("failed to remove symlink /dev/%s to block device /dev/block/%s" % (event.name, event.name)) 

handler = EventHandler()
notifier = pyinotify.Notifier(wm, handler)
wdd = wm.add_watch("/dev/block", mask) 

notifier.loop()
